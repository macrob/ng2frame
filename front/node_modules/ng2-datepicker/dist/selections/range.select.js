var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive } from '@angular/core';
import { BaseSelect, isSameDay } from './base.select';
var RangeDateImpl = (function () {
    function RangeDateImpl(rangeDate, onchange) {
        this.onChange = function (v) { };
        this.start = rangeDate.start;
        this.end = rangeDate.end;
        this.onChange = onchange;
    }
    Object.defineProperty(RangeDateImpl.prototype, "start", {
        get: function () {
            return this._start;
        },
        set: function (date) {
            this._start = date;
            this.onChange(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeDateImpl.prototype, "end", {
        get: function () {
            return this._end;
        },
        set: function (date) {
            this._end = date;
            this.onChange(this);
        },
        enumerable: true,
        configurable: true
    });
    return RangeDateImpl;
}());
export var RangeSelectDirective = (function (_super) {
    __extends(RangeSelectDirective, _super);
    function RangeSelectDirective() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(RangeSelectDirective.prototype, "EMPTY_VALUE", {
        get: function () {
            return {
                start: null,
                end: null
            };
        },
        enumerable: true,
        configurable: true
    });
    ;
    RangeSelectDirective.prototype.setValue = function (value) {
        var _this = this;
        if (value !== this.value) {
            if (!this.isDateValid(value.start))
                value.start = null;
            if (!this.isDateValid(value.end))
                value.end = null;
            this.value = new RangeDateImpl(value, function (v) {
                _this.onDateChange.emit(v);
                _this.hasStateChanged = true;
            });
        }
    };
    RangeSelectDirective.prototype.ngOnChanges = function (changes) {
        var start = this.value.start, end = this.value.end;
        if (!this.isDateValid(this.value.start))
            start = null;
        if (!this.isDateValid(this.value.end))
            end = null;
        if (start !== this.value.start || end !== this.value.end)
            this.value = {
                start: start,
                end: end
            };
    };
    RangeSelectDirective.prototype.selectDate = function (date) {
        if (!this.isDateSelectable(date))
            return false;
        if (!this.value.start)
            this.value.start = date;
        else if (!this.value.end)
            this.value.end = date;
        else {
            var diffStart = Math.abs(date.diff(this.value.start));
            var diffEnd = Math.abs(date.diff(this.value.end));
            if (diffStart < diffEnd)
                this.value.start = date;
            else
                this.value.end = date;
        }
        return true;
    };
    RangeSelectDirective.prototype.unselectDate = function (date) {
        if (date) {
            if (isSameDay(date, this.value.start)) {
                this.value.start = null;
                return true;
            }
            if (isSameDay(date, this.value.end)) {
                this.value.end = null;
                return true;
            }
        }
        return false;
    };
    RangeSelectDirective.prototype.isDateSelected = function (date) {
        return date && (isSameDay(date, this.value.start) || isSameDay(date, this.value.end));
    };
    RangeSelectDirective.prototype.isDateInSelectRange = function (date) {
        var start = this.value.start, end = this.value.end;
        return start && end &&
            date.isSameOrAfter(start, 'd') &&
            date.isSameOrBefore(end, 'd');
    };
    RangeSelectDirective = __decorate([
        Directive(BaseSelect.extendConfig({
            selector: '[rangeSelect]'
        }, RangeSelectDirective)), 
        __metadata('design:paramtypes', [])
    ], RangeSelectDirective);
    return RangeSelectDirective;
}(BaseSelect));

//# sourceMappingURL=range.select.js.map
