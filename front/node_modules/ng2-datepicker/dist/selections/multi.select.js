var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, Input } from '@angular/core';
import { BaseSelect, isSameDay } from './base.select';
export var MultiSelectDirective = (function (_super) {
    __extends(MultiSelectDirective, _super);
    function MultiSelectDirective() {
        _super.apply(this, arguments);
        this._limit = Infinity;
    }
    Object.defineProperty(MultiSelectDirective.prototype, "EMPTY_VALUE", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiSelectDirective.prototype, "limit", {
        get: function () {
            return this._limit;
        },
        set: function (limit) {
            this._limit = limit;
        },
        enumerable: true,
        configurable: true
    });
    MultiSelectDirective.prototype.setValue = function (dates) {
        var _this = this;
        if (dates != this.value) {
            this.value = (dates || [])
                .filter(function (d) { return _this.isDateValid(d); })
                .splice(0, dates.length - this.limit)
                .map(function (d) { return _this.getDay(d); })
                .sort(function (a, b) { return a - b; });
        }
    };
    MultiSelectDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var value = this.value;
        if (changes['minDate'] || changes['maxDate']) {
            var newValue = value.filter(function (d) { return _this.isDateValid(d); });
            if (newValue.length < value.length)
                value = newValue;
        }
        if (changes['limit'] && value.length > this.limit)
            value = value.slice(0, this.limit);
        this.value = value;
    };
    MultiSelectDirective.prototype.selectDate = function (date) {
        if (!this.isDateSelectable(date))
            return false;
        if (this.value.length < this.limit)
            this.value = this.value.concat([date])
                .sort(function (a, b) { return a - b; });
        else
            this.value = [date];
    };
    MultiSelectDirective.prototype.unselectDate = function (date) {
        var newValue = this.value.filter(function (d) { return !isSameDay(d, date); });
        if (newValue.length < this.value.length) {
            this.value = newValue;
            return true;
        }
        return false;
    };
    MultiSelectDirective.prototype.isDateSelected = function (date) {
        return !!this.value.find(function (d) { return isSameDay(d, date); });
    };
    MultiSelectDirective.prototype.isDateInSelectRange = function (date) {
        return this.value.length > 1 &&
            date.isBetween(this.value[0], this.value[this.value.length - 1], 'day', '[]');
    };
    __decorate([
        Input('multiSelect'), 
        __metadata('design:type', Object)
    ], MultiSelectDirective.prototype, "limit", null);
    MultiSelectDirective = __decorate([
        Directive(BaseSelect.extendConfig({
            selector: '[multiSelect]'
        }, MultiSelectDirective)), 
        __metadata('design:paramtypes', [])
    ], MultiSelectDirective);
    return MultiSelectDirective;
}(BaseSelect));

//# sourceMappingURL=multi.select.js.map
