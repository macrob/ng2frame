import { Directive, EventEmitter, DoCheck } from '@angular/core';
import * as moment from 'moment';
import { DateState } from '../models';
export declare abstract class BaseSelect<T> implements DoCheck {
    /**
     * Extend the base configuration needed by @Directive
     * @param {Directive} config           subclass configuration
     * @param {Function}  directiveClasses subclass
     * @param {any[]}     ...a             useless just to please compiler if subclass wants to add parameter
     */
    static extendConfig(config: Directive, directiveClasses: Function, ...a: any[]): Directive;
    protected readonly abstract EMPTY_VALUE: T;
    private _value;
    /**
     * Set the value without any check (except null) and emit an onDateChange event
     * @param {T} value
     */
    value: T;
    private _minDate;
    minDate: moment.Moment;
    private _maxDate;
    maxDate: moment.Moment;
    onDateChange: EventEmitter<T>;
    private onStateChange;
    registerOnStateChange(fn: () => void): void;
    hasStateChanged: boolean;
    ngDoCheck(): void;
    /**
     * Set value with guards for min/max and limit(multi)
     * @param {T}
     * @return {moment.Moment}
     */
    abstract setValue(value: T): void;
    /**
     * Return a date corresponding to the day of the input date.
     * We don't want to introduce time in our dates.
     * @param  {moment.Moment} date A date that may have time in it
     * @return {moment.Moment}      A date corresponding to a day with all time unit to 0.
     */
    protected getDay(date: moment.Moment): moment.Moment;
    /**
     * Should probably always start as :
     *
     * if( !this.isDateSelectable(date) )
     *   return false
     *
     * @param  {moment.Moment} date [description]
     * @return {boolean}            [description]
     */
    abstract selectDate(date: moment.Moment): boolean;
    abstract unselectDate(date: moment.Moment): boolean;
    abstract isDateSelected(date: moment.Moment): boolean;
    abstract isDateInSelectRange(date: moment.Moment): boolean;
    /** Returns true when date is between minDate and maxDate */
    isDateValid(date: moment.Moment): boolean;
    /**
     * return true if date is selectable meaning :
     *  - not null
     *  - valid
     *  - not already selected
     * Primarly meant to be used by selectDate() of subclass
     * @param  {moment.Moment} date [description]
     * @return {boolean}            [description]
     */
    protected isDateSelectable(date: moment.Moment): boolean;
    getDateState(date: moment.Moment): DateState;
}
export declare function isSameDay(date1: moment.Moment, date2: moment.Moment): boolean;
