import { Component, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as moment from 'moment';
import { BaseSelect } from '../selections/base.select';
import { CalendarDay } from '../models';
export interface Month {
    date: moment.Moment;
    days: CalendarDay[];
}
export declare abstract class DatePickerTemplate<T extends BaseSelect<V>, V> implements ControlValueAccessor {
    protected cd: ChangeDetectorRef;
    protected select: T;
    /**
    * Extend the base configuration needed by @Component
    * @param {Component} config           subclass configuration
    * @param {any[]}     ...a             useless just to please compiler if subclass wants to add parameter
    */
    static extendConfig(config: Component, componentClass: Function, ...a: any[]): Component;
    private _locale;
    locale: (string | false);
    showSixWeek: boolean;
    protected weekDaysName: any;
    protected months: Month[];
    readonly month: Month;
    constructor(cd: ChangeDetectorRef, select: T);
    onTouchedCallback: () => void;
    private onChangeCallback;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    value: V;
    protected applyLocale(date: moment.Moment): moment.Moment;
    /**
     * Generate an Array of CalendarDay representing a month to display,
     * with extra days from previous and next month to get plain weeks.
     * @param  {number}        month
     * @param  {number}        year
     * @param  {boolean}       showSixWeek true if we should always returns 6 weeks,
     * this will avoid calendar to change size depending on month displayed.
     * @return {CalendarDay[]}             Array of CalendarDay representing a month to display
     */
    private generateCalendarDays(date);
    private updateCalendarDays();
    private newMonth(date);
    initMonths(...dates: moment.Moment[]): void;
    setMonth(date: moment.Moment, idx?: number): void;
}
