import { ChangeDetectionStrategy } from '@angular/core';
import * as moment from 'moment';
import { extendConfig, formProvider } from '../config_helpers';
export var DatePickerTemplate = (function () {
    function DatePickerTemplate(cd, select) {
        var _this = this;
        this.cd = cd;
        this.select = select;
        /*@Input()*/ this.showSixWeek = false;
        this.weekDaysName = moment().localeData().weekdaysShort();
        this.months = [];
        /* Value accessor stuff */
        this.onTouchedCallback = function () { };
        this.onChangeCallback = function () { };
        if (!select)
            throw 'No SelectDirective specified. DatePicker must be coupled with a SelectDirective';
        this.select.registerOnStateChange(function () { _this.updateCalendarDays(); });
        // should we unsubscribe onDestroy since SelectDirective has
        // same lifecycle that this component ?
        this.select.onDateChange.subscribe(function (d) {
            _this.onChangeCallback(d);
        });
    }
    /**
    * Extend the base configuration needed by @Component
    * @param {Component} config           subclass configuration
    * @param {any[]}     ...a             useless just to please compiler if subclass wants to add parameter
    */
    //TODO the ...a trick works to keep compiler quiet but this will be transpiled into unseless code
    DatePickerTemplate.extendConfig = function (config, componentClass) {
        var a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            a[_i - 2] = arguments[_i];
        }
        return extendConfig({
            //we could auto-generate it using gulp or something
            inputs: ['locale', 'showSixWeek'],
            providers: [formProvider(componentClass)],
            changeDetection: ChangeDetectionStrategy.OnPush
        }, config);
    };
    Object.defineProperty(DatePickerTemplate.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        /*@Input()*/ set: function (locale) {
            this._locale = (!locale || locale.length == 0) ? false : locale;
            //with global locale we can call weekdaysShort() with a boolean to get array in locale order
            //unfortunately we can't for local locale, must do it ourselves.
            var localeData = this.applyLocale(moment()).localeData();
            var weekdays = localeData.weekdaysShort();
            // typings not up to date
            this.weekDaysName = weekdays.concat(weekdays.splice(0, localeData.firstDayOfWeek()));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerTemplate.prototype, "month", {
        //helper
        get: function () {
            return this.months[0];
        },
        enumerable: true,
        configurable: true
    });
    // TODO should we check that value match SelectDirective's expected value type ?
    // If so how ?
    // TODO use setValue() ?
    DatePickerTemplate.prototype.writeValue = function (value) {
        this.select.value = value;
    };
    DatePickerTemplate.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    DatePickerTemplate.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    Object.defineProperty(DatePickerTemplate.prototype, "value", {
        /* */
        //helper
        get: function () {
            return this.select.value;
        },
        set: function (v) {
            this.select.value = v;
        },
        enumerable: true,
        configurable: true
    });
    DatePickerTemplate.prototype.applyLocale = function (date) {
        if (this.locale)
            date.locale(this.locale);
        return date;
    };
    /**
     * Generate an Array of CalendarDay representing a month to display,
     * with extra days from previous and next month to get plain weeks.
     * @param  {number}        month
     * @param  {number}        year
     * @param  {boolean}       showSixWeek true if we should always returns 6 weeks,
     * this will avoid calendar to change size depending on month displayed.
     * @return {CalendarDay[]}             Array of CalendarDay representing a month to display
     */
    DatePickerTemplate.prototype.generateCalendarDays = function (date) {
        var today = moment();
        //start date
        var itDate = this.applyLocale(date.clone());
        itDate.subtract(itDate.weekday(), 'd');
        //end date
        var endDate = this.applyLocale(date.clone().endOf('month'));
        endDate.add(6 - endDate.weekday(), 'd');
        if (this.showSixWeek) {
            var nbWeeks = endDate.diff(itDate, 'weeks');
            if (nbWeeks < 5)
                endDate.add(5 - nbWeeks, 'weeks');
        }
        var days = [];
        while (itDate.isBefore(endDate)) {
            days.push({
                date: itDate.clone(),
                state: this.select.getDateState(itDate),
                isToday: today.isSame(itDate, 'day'),
                isCurrDisplayMonth: itDate.month() == date.month()
            });
            itDate = itDate.add(1, 'd');
        }
        return days;
    };
    DatePickerTemplate.prototype.updateCalendarDays = function () {
        for (var _i = 0, _a = this.months; _i < _a.length; _i++) {
            var m = _a[_i];
            var days = m.days;
            for (var i = 0, l = days.length; i < l; i++) {
                var day = days[i], state = this.select.getDateState(day.date);
                if (day.state != state) {
                    days[i] = {
                        date: day.date,
                        isToday: day.isToday,
                        isCurrDisplayMonth: day.isCurrDisplayMonth,
                        state: state
                    };
                }
            }
        }
        this.cd.markForCheck();
    };
    DatePickerTemplate.prototype.newMonth = function (date) {
        var monthDate = moment([date.year(), date.month()]);
        return {
            date: monthDate,
            days: this.generateCalendarDays(monthDate)
        };
    };
    DatePickerTemplate.prototype.initMonths = function () {
        var _this = this;
        var dates = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dates[_i - 0] = arguments[_i];
        }
        this.months = dates.map(function (d) { return _this.newMonth(d); });
        this.cd.markForCheck();
    };
    DatePickerTemplate.prototype.setMonth = function (date, idx) {
        if (idx === void 0) { idx = 0; }
        this.months[idx] = this.newMonth(date);
        this.cd.markForCheck();
    };
    return DatePickerTemplate;
}());

//# sourceMappingURL=datepicker.template.js.map
